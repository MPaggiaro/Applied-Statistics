misc[1,]
# why do we have to compute the modified APER?
prior <- c(0.2,0.1,0.7)
G <- dim(prior)
# why do we have to compute the modified APER?
prior <- c(0.2,0.1,0.7)
G <- dim(prior)
prior
G <- length(prior)
misc[1,-1]
G <- length(prior)
APER <- 0
for(g in 1:G)
APER <- APER + sum(misc[g,-g])/sum(misc[g,]) * prior[g]
APER
View(data1)
View(data1)
# c) Classification of a new datum:
x0 <- data.frame(Year = 986, Aspect.Ratio = 1.4)
predict(qda.data,x0)
# Maya
# Let's plot it to see if it fits:
points(x0, col='black', pch=40)
# Maya
# Let's plot it to see if it fits:
points(x0, col='black', pch=20)
sum(misc)
misc - diag(misc)
diag(misc)
WrongAPER <- (sum(misc)-sum(diag(misc)))/sum(misc)
WrongAPER
APER
misc
1+3+4+1
9/167
# set wd
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# clean workspace:
graphics.off()
rm(list=ls())
# load the function for m shapiro test:
load("C:/Users/Marco Paggiaro/OneDrive/Desktop/mieidati/Applied Statistics/mcshapiro.test.RData")
# Import all the libraries, just because
library(class)
library(MASS)
library(car)
# dataset exploration:
data <- read.table("Hotels.txt", header = T)
head(data)
attach(data)
detach(data)
# dataset exploration:
data <- read.table("Hotels.txt", header = T)
head(data)
attach(data)
lda.data <- lda(data1, Civilization, priors = c(0.2,0.1,0.7))
# set wd
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# clean workspace:
graphics.off()
rm(list=ls())
# load the function for m shapiro test:
load("C:/Users/Marco Paggiaro/OneDrive/Desktop/mieidati/Applied Statistics/mcshapiro.test.RData")
# Import all the libraries, just because
library(class)
library(MASS)
library(car)
# dataset exploration:
data <- read.table("precolombian.txt", header = T)
head(data)
attach(data)
plot(Year, Aspect.Ratio, col=Civilization)
data1 <- data[,1:2]
# a) build a classifier:
levels(Civilization)
maya <-which(Civilization =='Maya')
aztec <- which(Civilization =='Aztec')
toltec <-which(Civilization =='Toltec')
# assumptions:
# 1) Gaussianity.
mcshapiro.test(data[maya,1:2])
mcshapiro.test(data[aztec,1:2])
mcshapiro.test(data[toltec,1:2])
# 2) covariance structure:
S1 <- cov(data[maya,1:2])
S2 <- cov(data[aztec,1:2])
S3 <- cov(data[toltec,1:2])
x11()
par(mfrow=c(1,3))
image(S1, col=heat.colors(100),main='Cov. S1', asp=1, axes = FALSE, breaks = quantile(rbind(S1,S2,S3), (0:100)/100, na.rm=TRUE))
image(S2, col=heat.colors(100),main='Cov. S2', asp=1, axes = FALSE, breaks = quantile(rbind(S1,S2,S3), (0:100)/100, na.rm=TRUE))
image(S3, col=heat.colors(100),main='Cov. S3', asp=1, axes = FALSE, breaks = quantile(rbind(S1,S2,S3), (0:100)/100, na.rm=TRUE))
qda.data <- qda(data1, Civilization, priors = c(0.2,0.1,0.7))
lda.data <- lda(data1, Civilization, priors = c(0.2,0.1,0.7))
# c) compute the APER of the classifier:
prediction <- predict(lda.data)
# confusion matrix:
misc <-table(true.class = Civilization, assigned.class = prediction$class)
# why do we have to compute the modified APER?
prior <- c(0.2,0.1,0.7)
G <- length(prior)
APER <- 0
for(g in 1:G)
APER <- APER + sum(misc[g,-g])/sum(misc[g,]) * prior[g]
APER
misc
WrongAPER <- (sum(misc)-sum(diag(misc)))/sum(misc)
WrongAPER # very different, be careful!!!!
# set wd
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# clean workspace:
graphics.off()
rm(list=ls())
# load the function for m shapiro test:
load("C:/Users/Marco Paggiaro/OneDrive/Desktop/mieidati/Applied Statistics/mcshapiro.test.RData")
# Import all the libraries, just because
library(class)
library(MASS)
library(car)
# dataset exploration:
data <- read.table("Hotels.txt", header = T)
head(data)
attach(data)
price
detach()
price
detach()
price
head(data)
# set wd
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# clean workspace:
graphics.off()
rm(list=ls())
# load the function for m shapiro test:
load("C:/Users/Marco Paggiaro/OneDrive/Desktop/mieidati/Applied Statistics/mcshapiro.test.RData")
# Import all the libraries, just because
library(class)
library(MASS)
library(car)
# dataset exploration:
data <- read.table("Hotels.txt", header = T)
head(data)
attach(data)
head(data)
# set wd
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# clean workspace:
graphics.off()
rm(list=ls())
# load the function for m shapiro test:
load("C:/Users/Marco Paggiaro/OneDrive/Desktop/mieidati/Applied Statistics/mcshapiro.test.RData")
# Import all the libraries, just because
library(class)
library(MASS)
library(car)
# dataset exploration:
data <- read.table("Hotels.txt", header = T)
head(data)
attach(data)
# set wd
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# clean workspace:
graphics.off()
rm(list=ls())
# load the function for m shapiro test:
load("C:/Users/Marco Paggiaro/OneDrive/Desktop/mieidati/Applied Statistics/mcshapiro.test.RData")
# Import all the libraries, just because
library(class)
library(MASS)
library(car)
# dataset exploration:
data <- read.table("Hotels.txt", header = T)
head(data)
attach(data)
# set wd
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# clean workspace:
graphics.off()
rm(list=ls())
# load the function for m shapiro test:
load("C:/Users/Marco Paggiaro/OneDrive/Desktop/mieidati/Applied Statistics/mcshapiro.test.RData")
# Import all the libraries, just because
library(class)
library(MASS)
library(car)
# dataset exploration:
data <- read.table("Hotels.txt", header = T)
head(data)
# set wd
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# clean workspace:
graphics.off()
rm(list=ls())
# load the function for m shapiro test:
load("C:/Users/Marco Paggiaro/OneDrive/Desktop/mieidati/Applied Statistics/mcshapiro.test.RData")
# Import all the libraries, just because
library(class)
library(MASS)
library(car)
# dataset exploration:
data <- read.table("Hotels.txt", header = T)
head(data)
View(data)
View(data)
attach(data)
price
View(data)
View(data)
View(data)
View(data)
# a) estimate model parameters:
n <- dim(data)[1]
is.empty(Position)
is.nan(Position)
is.character(Position)
isSeafront <- which(Position == "Seafront")
isSeafront
isWetseason <- which(Season == "WetSeason")
isWetseason
dSeafront <- dWetseason <- rep(0,n)
dSeafront
dSeafront[isSeafront] <- 1
dWetseason [isWetseason] <-1
dSeafront
pi
seasonality <- 1 + cos(4*pi/365*t)
sinusoid <- 1 + cos(4*pi/365*t)
fm <- lm(price ~ sinusoid + dSeafront + dWetseason +
sinusoid:dSeafront + sinusoid:dSeafront)
summary(fm)
fm <- lm(price ~ sinusoid + dSeafront + dWetseason +
sinusoid:dSeafront + sinusoid:dWetseason)
summary(fm)
# assumptions:
sum(fm$residuals^2)/fm$df
10.03^2
# graphical representation of the regression:
plot(t, price)
rbind(dWetseason, dSeafront)
cbind(dWetseason, dSeafront)
plot(t[isWetseason], price[isWetseason], col = "blue")
# graphical representation of the regression:
plot(t, price)
points(t[isWetseason], price[isWetseason], col = "blue", pch = 20)
# graphical representation of the regression:
plot(t, price, pch = 20)
points(t[isWetseason], price[isWetseason], col = "blue", pch = 20)
# graphical representation of the regression:
plot(t, price, pch = 20)
points(t[isSeafront], price[isSeafront], col = "blue", pch = 20)
isWetseason & isSeafront
isWetseason || isSeafront
SW = (isWetseason == isSeafront)
SW
isSeafront
isWetseason
intersect
intersect(isWetseason,isSeafront)
# graphical representation of the regression:
plot(t, price, pch = 20, col = "white")
points(t[intersect(isWetseason, isSeafront)], price[intersect(isWetseason, isSeafront)], col = "blue", pch = 20)
!isWetseason
1:n-isWets
c(1:n)
c(1:n) - isWetseason
points(t[dWetseason==1 && dSeafront==1)], price[intersect(isWetseason, isSeafront)], col = "blue", pch = 20)
points(t[dWetseason==1 && dSeafront==1], price[intersect(isWetseason, isSeafront)], col = "blue", pch = 20)
dWetseason == && dSeafront ==1
dWetseason == & dSeafront ==1
(dWetseason == 1) & (dSeafront ==1)
points(t[which(dWetseason==1 && dSeafront==1)], price[intersect(isWetseason, isSeafront)], col = "blue", pch = 20)
which(dWetseason==1)
which(dWetseason==1 & dSeafront == 1)
points(t[which(dWetseason==1 && dSeafront==1)], price[which(dWetseason==1 && dSeafront==1)], col = "blue", pch = 20)
points(t[which(dWetseason==1 && dSeafront==0)], price[which(dWetseason==1 && dSeafront==0)], col = "blue")
points(t[which(dWetseason==1 && dSeafront==0)], price[which(dWetseason==1 && dSeafront==0)], col = "blue")
# graphical representation of the regression:
plot(t, price, pch = 20, col = "white")
points(t[which(dWetseason==1 && dSeafront==1)], price[which(dWetseason==1 && dSeafront==1)], col = "blue", pch = 20)
t[which(dWetseason==1 && dSeafront==1)]
which(dWetseason==1 && dSeafront==1)
which(dWetseason==1 & dSeafront==1)
points(t[which(dWetseason==1 & dSeafront==1)], price[which(dWetseason==1 & dSeafront==1)], col = "blue", pch = 20)
points(t[which(dWetseason==1 & dSeafront==0)], price[which(dWetseason==1 & dSeafront==0)], col = "blue")
points(t[which(dWetseason==0 & dSeafront==1)], price[which(dWetseason==0 & dSeafront==1)], col = "green", pch = 20)
points(t[which(dWetseason==0 & dSeafront==0)], price[which(dWetseason==0 & dSeafront==0)], col = "green")
which(dWetseason==1 && dSeafront==1)
t[end]
t[1]
t[n]
tt = seq(t[1],t[n], 200)
b_prov <- coeff(fm)
b_prov <- coef(fm)
summary(fm)
# wet season + seafront
lines(tt, 1 + cos(4*pi/365*tt))
sin_tt <- 1 + cos(4*pi/365*tt)
b <- coef(fm)
# wet season + seafront
lines(tt, b[1]+b[3]+b[4]+(b[2]+b[5]+b[6])*sin_tt, col = blue)
# wet season + seafront
lines(tt, b[1]+b[3]+b[4]+(b[2]+b[5]+b[6])*sin_tt, col = "blue")
help(seq)
tt = seq(t[1],t[n], 0.5)
sin_tt <- 1 + cos(4*pi/365*tt)
b <- coef(fm)
# wet season + seafront
lines(tt, b[1]+b[3]+b[4]+(b[2]+b[5]+b[6])*sin_tt, col = "blue")
# graphical representation of the regression:
plot(t, price, pch = 20, col = "white")
points(t[which(dWetseason==1 & dSeafront==1)], price[which(dWetseason==1 & dSeafront==1)], col = "blue", pch = 20)
points(t[which(dWetseason==1 & dSeafront==0)], price[which(dWetseason==1 & dSeafront==0)], col = "blue")
points(t[which(dWetseason==0 & dSeafront==1)], price[which(dWetseason==0 & dSeafront==1)], col = "green", pch = 20)
points(t[which(dWetseason==0 & dSeafront==0)], price[which(dWetseason==0 & dSeafront==0)], col = "green")
tt = seq(t[1],t[n], 0.5)
sin_tt <- 1 + cos(4*pi/365*tt)
b <- coef(fm)
# wet season + seafront
lines(tt, b[1]+b[3]+b[4]+(b[2]+b[5]+b[6])*sin_tt, col = "blue")
# wet season no seafront
lines(tt, b[1]+b[4]+(b[2]+b[6])*sin_tt, col = "blue", linetype = "dashed")
# wet season no seafront
lines(tt, b[1]+b[4]+(b[2]+b[6])*sin_tt, col = "blue", lty = "dashed")
# set wd
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# clean workspace:
graphics.off()
rm(list=ls())
# load the function for m shapiro test:
load("C:/Users/Marco Paggiaro/OneDrive/Desktop/mieidati/Applied Statistics/mcshapiro.test.RData")
# Import all the libraries, just because
library(class)
library(MASS)
library(car)
# dataset exploration:
data <- read.table("Hotels.txt", header = T)
head(data)
View(data)
View(data)
attach(data)
# a) estimate model parameters:
n <- dim(data)[1]
isSeafront <- which(Position == "Seafront")
isSeafront
isWetseason <- which(Season == "WetSeason")
isWetseason
dSeafront <- dWetseason <- rep(0,n)
dSeafront[isSeafront] <- 1
dWetseason [isWetseason] <-1
sinusoid <- 1 + cos(4*pi/365*t)
fm <- lm(price ~ sinusoid + dSeafront + dWetseason +
sinusoid:dSeafront + sinusoid:dWetseason)
summary(fm)
# estimate of sigma^2
sum(fm$residuals^2)/fm$df
summary(fm)
names(summary(fm))
summary(fm)$sigma
# graphical representation of the regression:
plot(t, price, pch = 20, col = "white")
points(t[which(dWetseason==1 & dSeafront==1)], price[which(dWetseason==1 & dSeafront==1)], col = "blue", pch = 20)
points(t[which(dWetseason==1 & dSeafront==0)], price[which(dWetseason==1 & dSeafront==0)], col = "blue")
points(t[which(dWetseason==0 & dSeafront==1)], price[which(dWetseason==0 & dSeafront==1)], col = "green", pch = 20)
points(t[which(dWetseason==0 & dSeafront==0)], price[which(dWetseason==0 & dSeafront==0)], col = "green")
tt = seq(t[1],t[n], 0.5)
sin_tt <- 1 + cos(4*pi/365*tt)
b <- coef(fm)
# wet season + seafront
lines(tt, b[1]+b[3]+b[4]+(b[2]+b[5]+b[6])*sin_tt, col = "blue")
# wet season no seafront
lines(tt, b[1]+b[4]+(b[2]+b[6])*sin_tt, col = "blue", lty = "dashed")
# non wet season + seafront
lines(tt, b[1]+b[3]+(b[2]+b[5])*sin_tt, col = "green")
# non wet season + non-seafront
lines(tt, b[1]+(b[2])*sin_tt, col = "green")
# non wet season + non-seafront
lines(tt, b[1]+(b[2])*sin_tt, col = "green",lty = "dashed")
plot(t, price, pch = 20, col = "white")
points(t[which(dWetseason==1 & dSeafront==1)], price[which(dWetseason==1 & dSeafront==1)], col = "blue", pch = 20)
points(t[which(dWetseason==1 & dSeafront==0)], price[which(dWetseason==1 & dSeafront==0)], col = "blue")
points(t[which(dWetseason==0 & dSeafront==1)], price[which(dWetseason==0 & dSeafront==1)], col = "green", pch = 20)
points(t[which(dWetseason==0 & dSeafront==0)], price[which(dWetseason==0 & dSeafront==0)], col = "green")
tt = seq(t[1],t[n], 0.5)
sin_tt <- 1 + cos(4*pi/365*tt)
b <- coef(fm)
# wet season + seafront
lines(tt, b[1]+b[3]+b[4]+(b[2]+b[5]+b[6])*sin_tt, col = "blue")
# wet season no seafront
lines(tt, b[1]+b[4]+(b[2]+b[6])*sin_tt, col = "blue", lty = "dashed")
lines(tt, b[1]+b[3]+(b[2]+b[5])*sin_tt, col = "green")
# non wet season + non-seafront
lines(tt, b[1]+(b[2])*sin_tt, col = "green",lty = "dashed")
# model assumptions:
par(mfrow=c(2,2))
plot(fm)
shapiro.test(residuals(fm))
linearHypothesis(fm, A, b)
# 1. dependence rates vs. seasonality.
A <- rbind(c(0,0,0,1,0,0), c(0,0,0,0,0,1))
b <- c(0,0)
linearHypothesis(fm, A, b)
# 2. rates vs position
A <- rbind(c(0,0,1,0,0,0), c(0,0,0,0,1,0))
b <- c(0,0)
linearHypothesis(fm, A, b)
# 3. temporal rates vs. season/position:
A <- rbind(c(0,0,0,0,1,0), c(0,0,0,0,0,1))
b <- c(0,0)
linearHypothesis(fm, A, b)
# single ones:
A <- c(0,0,0,0,0,1)
b <- 0
linearHypothesis(fm, A, b)
# c) model reduction:
fm <- lm(price ~ sinusoid + dSeafront + dWetseason)
summary(fm)
# graphical representation of the regression:
plot(t, price, pch = 20, col = "white")
points(t[which(dWetseason==1 & dSeafront==1)], price[which(dWetseason==1 & dSeafront==1)], col = "blue", pch = 20)
points(t[which(dWetseason==1 & dSeafront==0)], price[which(dWetseason==1 & dSeafront==0)], col = "blue")
points(t[which(dWetseason==0 & dSeafront==1)], price[which(dWetseason==0 & dSeafront==1)], col = "green", pch = 20)
points(t[which(dWetseason==0 & dSeafront==0)], price[which(dWetseason==0 & dSeafront==0)], col = "green")
tt = seq(t[1],t[n], 0.5)
sin_tt <- 1 + cos(4*pi/365*tt)
b <- coef(fm)
# wet season + seafront
lines(tt, b[1]+b[3]+b[4]+b[2]*sin_tt, col = "blue")
# wet season no seafront
lines(tt, b[1]+b[4]+b[2]*sin_tt, col = "blue", lty = "dashed")
lines(tt, b[1]+b[3]+b[2]*sin_tt, col = "green")
# non wet season + non-seafront
lines(tt, b[1]+b[2]*sin_tt, col = "green",lty = "dashed")
par(mfrow=c(2,2))
plot(fm)
shapiro.test(residuals(fm))
library(MASS)
library(car)
library(rgl)
setwd("C:/Users/Marco Paggiaro/OneDrive/Desktop/mieidati/Applied Statistics/Labs/Lab 11 - 15052020")
people <- read.table('people.txt', header=T)
people
plot(people,pch=20)
attach(people)
### question a)
fit <- lm(rifiuti ~ mese + I(1 - cos(2*pi/12*mese)))
summary(fit)
t <- seq(from=0,to=30,length=100)
points(t,fit$coeff[1]+fit$coeff[2]*t+fit$coeff[3]*(1-cos(2*pi/12*t)),type='l')
### question b)
par(mfrow=c(2,2))
plot(fit)
shapiro.test(residuals(fit))
# Test: H0: beta_1==0 vs beta_1!=0
summary(fit)
## or
linearHypothesis(fit,rbind(c(0,1,0)),0)
### question c)
# Test: H0: beta_2==0 vs beta_2!=0
summary(fit)
## or
linearHypothesis(fit,rbind(c(0,0,1)),0)
### question d)
linearHypothesis(fit,rbind(c(0,1,0)),10)
# or (from the summary)
summary(fit)
t <- (coef(fit)[2]-10)/sqrt(diag(vcov(fit))[2])
t
pval <- 2*(1-pt(t,29-(2+1)))
pval
### question e)
rifiuti.vinc <- rifiuti - 10*mese
fit2 <- lm(rifiuti.vinc ~ I(1 - cos(2*pi/12*mese)))
summary(fit2)
par(mfrow=c(2,2))
plot(fit2)
shapiro.test(residuals(fit2))
coefficients(fit2)
C <- rbind(c(1,(1 - cos(2*pi/12*30))),   # total waste in June 2011 [mese=30]
c(1,0),                       # waste due to residents in June 2011
c(0,(1 - cos(2*pi/12*30))))   # waste due to tourists in June 2011
C
pred <- C %*% coefficients(fit2) + c(10*30, 10*30, 0)
# pred=C%*%beta.hat[fit.mod.constrained] + 10*mese[constrained part]
pred
plot(people, xlim=c(1,30), ylim=c(900,1400))
lines(mese, fitted(fit))
lines(mese, fitted(fit2) + 10*mese, col='blue')
points(c(30,30,30), pred, pch=16)
legend('bottomright',c('Model 1', 'Constrained model'), lty=1, col=c('black','blue'))
dev.off()
coefficients(fit2)
C <- rbind(c(1,(1 - cos(2*pi/12*30))),   # total waste in June 2011 [mese=30]
c(1,0),                       # waste due to residents in June 2011
c(0,(1 - cos(2*pi/12*30))))   # waste due to tourists in June 2011
C
pred <- C %*% coefficients(fit2) + c(10*30, 10*30, 0)
# pred=C%*%beta.hat[fit.mod.constrained] + 10*mese[constrained part]
pred
plot(people, xlim=c(1,30), ylim=c(900,1400))
lines(mese, fitted(fit))
lines(mese, fitted(fit2) + 10*mese, col='blue')
points(c(30,30,30), pred, pch=16)
