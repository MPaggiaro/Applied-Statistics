install.packages("mvtnorm")
setwd("C:/Users/Marco Paggiaro/OneDrive/Desktop/mieidati/Applied Statistics/Labs/Lab 3 - 27032020")
# Generate the data
library(mvtnorm)
mu  <-  c(1,2)
sig <-  cbind(c(1,1), c(1,4))
n   <-  100
set.seed(27032020)
X <- rmvnorm(n, mu, sig)
# we plot the data
x11()
plot(X, asp=1, xlab='Var 1', ylab='Var 2',pch=19, xlim=c(-6,6), ylim=c(-5,10))
# we plot the sample mean
points(colMeans(X)[1], colMeans(X)[2], col='red', pch=19,lwd=3)
abline(h=colMeans(X)[2], lty=2, col='grey')
points(X[,1], rep(colMeans(X)[2], n), col='red')
var(X[,1])
abline(v=colMeans(X)[1], lty=2, col='grey')
points(rep(colMeans(X)[1], n), X[,2], col='red')
var(X[,2])
theta   <- seq(0, pi, by = 2*pi/360)
Var     <- NULL
theta[30]
abline(a = colMeans(X)[2] - tan(theta[30])*colMeans(X)[1], b = tan(theta[30]), lty=2)
a <- c(cos(theta[30]), sin(theta[30]))
proj30=(a)%*%(t(X)-colMeans(X))
points(colMeans(X)[1]+cos(theta[30])*proj30,
colMeans(X)[2]+sin(theta[30])*proj30, col='red')
var(X %*% a)
for(i in 1:length(theta))  # for i between 1 and length(theta) ripeat:
{
a   <- c(cos(theta[i]), sin(theta[i])) # unit vector in direction theta[i]
v   <- var(X %*% a)                    # sample variance of the projection of X along the direction identified by vector a
Var <- c(Var, v)
}
# we can compute the min and max of the variance
max.var   <- max(Var)
max.theta <- theta[which.max(Var)]
max.a     <- c(cos(max.theta), sin(max.theta))
min.var   <- min(Var)
min.theta <- theta[which.min(Var)]
min.a     <- c(cos(min.theta), sin(min.theta))
x11(width=10, height=7)
par(mfrow=c(1,2))
plot(X, asp=1, xlab='Var 1', ylab='Var 2',pch=20)
abline(a = colMeans(X)[2] - tan(max.theta)*colMeans(X)[1], b = tan(max.theta), lty = 4, col = 'navyblue', lwd = 2)
abline(a = colMeans(X)[2] - tan(min.theta)*colMeans(X)[1], b = tan(min.theta), lty = 4, col = 'blue', lwd = 2)
plot(theta, Var, type = 'l', col='dark grey', lwd = 2,ylab='Variance')
points(max.theta, max.var, pch=16, col='navyblue')
points(min.theta, min.var, pch=16, col='blue')
M <- colMeans(X)
S <- cov(X)
# we compute the eigenvectors and eigenvalues
eigen(S)
# we compare with the values and directions of max/min variability
# we found empirically
max.var
min.var
max.a
min.a
par(mfrow=c(1,2))
plot(X, asp=1, xlab='Var 1', ylab='Var 2',pch=20)
ellipse(M, S, 1, add=T,lwd=3)
par(mfrow=c(1,2))
plot(X, asp=1, xlab='Var 1', ylab='Var 2',pch=20)
ellipse(M, S, 1, add=T,lwd=3)
abline(a = M[2] - eigen(S)$vectors[2,1]/eigen(S)$vectors[1,1]*M[1], b = eigen(S)$vectors[2,1]/eigen(S)$vectors[1,1], lty = 2, col = 'dark red', lwd = 2)
abline(a = M[2] - eigen(S)$vectors[2,2]/eigen(S)$vectors[1,2]*M[1], b = eigen(S)$vectors[2,2]/eigen(S)$vectors[1,2], lty = 2, col = 'red', lwd = 2)
abline(a = M[2] - tan(max.theta)*M[1], b = tan(max.theta), lty = 4, col = 'navyblue', lwd = 2)
abline(a = M[2] - tan(min.theta)*M[1], b = tan(min.theta), lty = 4, col = 'blue', lwd = 2)
plot(theta, Var, type = 'l', col='dark grey', lwd = 2,ylab='Varianza')
points(max.theta, max.var, pch=20, col='navyblue')
points(min.theta, min.var, pch=20, col='blue')
points(atan(eigen(S)$vector[2,1]/eigen(S)$vector[1,1]), max.var, pch=3, col='dark red')
points(atan(eigen(S)$vector[2,2]/eigen(S)$vector[1,2])+pi, min.var, pch=3, col='red')
graphics.off()
par(mfrow=c(1,2))
plot(X, asp=1, xlab='Var 1', ylab='Var 2',pch=20)
ellipse(M, S, 1, add=T,lwd=3)
abline(a = M[2] - eigen(S)$vectors[2,1]/eigen(S)$vectors[1,1]*M[1], b = eigen(S)$vectors[2,1]/eigen(S)$vectors[1,1], lty = 2, col = 'dark red', lwd = 2)
abline(a = M[2] - eigen(S)$vectors[2,2]/eigen(S)$vectors[1,2]*M[1], b = eigen(S)$vectors[2,2]/eigen(S)$vectors[1,2], lty = 2, col = 'red', lwd = 2)
abline(a = M[2] - tan(max.theta)*M[1], b = tan(max.theta), lty = 4, col = 'navyblue', lwd = 2)
abline(a = M[2] - tan(min.theta)*M[1], b = tan(min.theta), lty = 4, col = 'blue', lwd = 2)
plot(theta, Var, type = 'l', col='dark grey', lwd = 2,ylab='Varianza')
points(max.theta, max.var, pch=20, col='navyblue')
points(min.theta, min.var, pch=20, col='blue')
points(atan(eigen(S)$vector[2,1]/eigen(S)$vector[1,1]), max.var, pch=3, col='dark red')
points(atan(eigen(S)$vector[2,2]/eigen(S)$vector[1,2])+pi, min.var, pch=3, col='red')
tourists <- read.table('tourists.txt', header=T)
head(tourists)
tourists.label <- tourists[,1:2]
tourists <- tourists[,-(1:2)]
n <- dim(tourists)[1]
p <- dim(tourists)[2]
# Boxplot
x11()
par(mar=rep(8,4))
boxplot(tourists, las=2, col='gold')
par(mar=rep(8,4))
boxplot(scale(x=tourists,center = T, scale=F), las=2, col='gold')
# We perform the PCA on original data
pc.tourists <- princomp(tourists, scores=T)
pc.tourists
summary(pc.tourists)
# cumulative proportion of explained variance
cumsum(pc.tourists$sd^2)/sum(pc.tourists$sd^2)
load.tour <- pc.tourists$loadings
load.tour
load.tour[,1:8]
# graphical representation of the loadings of the first six principal components
x11()
par(mfcol = c(4,2))
for(i in 1:8) barplot(load.tour[,i], ylim = c(-1, 1), main=paste("PC",i))
x11()
par(mfrow = c(3,1))
for(i in 1:3) barplot(load.tour[,i], ylim = c(-1, 1))
x11()
layout(matrix(c(2,3,1,3),2,byrow=T))
plot(pc.tourists, las=2, main='Principal components', ylim=c(0,4.5e7))
barplot(sapply(tourists,sd)^2, las=2, main='Original Variables', ylim=c(0,4.5e7), ylab='Variances')
plot(cumsum(pc.tourists$sd^2)/sum(pc.tourists$sd^2), type='b', axes=F, xlab='number of components',
ylab='contribution to the total variance', ylim=c(0,1))
abline(h=1, col='blue')
abline(h=0.8, lty=2, col='blue')
box()
axis(2,at=0:10/10,labels=0:10/10)
axis(1,at=1:ncol(tourists),labels=1:ncol(tourists),las=2)
# We compute the standardized variables
tourists.sd <- scale(tourists)
tourists.sd <- data.frame(tourists.sd)
head(tourists.sd)
pc.tourists <- princomp(tourists.sd, scores=T)
pc.tourists
summary(pc.tourists)
x11()
layout(matrix(c(2,3,1,3),2,byrow=T))
plot(pc.tourists, las=2, main='Principal Components', ylim=c(0,7))
abline(h=1, col='blue')
barplot(sapply(tourists.sd,sd)^2, las=2, main='Original Variables', ylim=c(0,7), ylab='Variances')
plot(cumsum(pc.tourists$sde^2)/sum(pc.tourists$sde^2), type='b', axes=F, xlab='Number of components', ylab='Contribution to the total variance', ylim=c(0,1))
box()
axis(2,at=0:10/10,labels=0:10/10)
axis(1,at=1:ncol(tourists.sd),labels=1:ncol(tourists.sd),las=2)
load.tour <- pc.tourists$loadings
load.tour
x11()
par(mar = c(2,2,2,1), mfrow=c(3,1))
for(i in 1:3)barplot(load.tour[,i], ylim = c(-1, 1), main=paste('Loadings PC ',i,sep=''))
load.tour <- pc.tourists$loadings
load.tour
x11()
par(mar = c(2,2,2,1), mfrow=c(3,1))
for(i in 1:3)barplot(load.tour[,i], ylim = c(-1, 1), main=paste('Loadings PC ',i,sep=''))
scores.tourists <- pc.tourists$scores
scores.tourists
x11()
plot(scores.tourists[,1:2])
abline(h=0, v=0, lty=2, col='grey')
x11()
biplot(pc.tourists)
x11()
layout(matrix(c(1,2),2))
boxplot(tourists.sd, las=2, col='gold', main='Standardized variables')
scores.tourists <- data.frame(scores.tourists)
boxplot(scores.tourists, las=2, col='gold', main='Principal components')
expo.label=factor(ifelse(tourists.label[,1] %in% c("May","Jun","Jul","Aug","Sept","Oct"), 'Expo', 'Non Expo'))
col.expo = ifelse(tourists.label[,1] %in% c("May","Jun","Jul","Aug","Sept","Oct"), 'red', 'blue')
x11(width=10, height = 10)
layout(cbind(c(2,4), c(1,3)), widths = c(1,4), heights = c(4, 1))
par(mar=rep(3,4))
plot(scores.tourists[,1:2], col=col.expo, pch=19, xlim=c(-8,20), ylim=c(-3,3.2), las=2)
abline(h=-3, v=-8, col=1)
points(scores.tourists[,1], rep(-3, n), col=col.expo, pch=19)
points(rep(-8, n),scores.tourists[,2], col=col.expo, pch=19)
abline(h=0, v=0, lty=2, col='grey')
boxplot(scores.tourists[,2]~expo.label, col=c('red', 'blue'), ylim=c(-3,3.2), las=2)
boxplot(scores.tourists[,1]~expo.label, col=c('red', 'blue'), ylim=c(-8,20), horizontal=T, las=2)
#_______________________________________________________________________________
### p-dimensional geometrical interpretation of the principal components
library(rgl)
# theoretical mean and covariance matrix of the model
mu  <- c(0, 2, 3)
mu
sig <- rbind(c(9, 1, 1), c(1, 4, 1), c(1, 1, 1))
sig
nobs <- 100
X <- rmvnorm(nobs, mu, sig)
# sample mean and covariance matrix
M <- colMeans(X)
M
S <- cov(X)
S
open3d()                    # open a new device
points3d(X, asp=1, size=4)  # plot the points
axes3d()                    # add the axes
plot3d(ellipse3d(S, centre=M, level= 9/10), alpha=0.15, add = TRUE) # add the ellipsoid
# principal components
PC <- princomp(X)
summary(PC)
# "0" principal component: the best approximation of dimension 0 (a point)
open3d()
points3d(X, asp=1, size=4)
axes3d()
points3d(t(M), col='red', size=6)
for(i in 1:100)
lines3d(rbind(X[i,], M))
# I principal component: the best approximation of dimension 1 (a line)
open3d()
points3d(X, asp=1, size=4)
axes3d()
PC1 <- NULL
for(i in 1:nobs) PC1 <- rbind(PC1, PC$loadings[,1]*PC$scores[i,1] + M)
points3d(PC1, col='red', size=6)
for(i in 1:nobs)lines3d(rbind(X[i,], PC1[i,]),col='blue')
lines3d(rbind(M + 2*PC$sdev[1] * PC$loadings[,1], M - 2*PC$sdev[1] * PC$loadings[,1]), col='forestgreen',lwd=2)
# I and II principal components: the best approximation of dimension 2 (a plane)
open3d()
points3d(X, asp=1, size=4)
axes3d()
PC12 <- NULL
for(i in 1:nobs)PC12 <- rbind(PC12, PC$loadings[,1]*PC$scores[i,1] + PC$loadings[,2]*PC$scores[i,2] + M)
points3d(PC12, col='red', size=6)
for(i in 1:nobs)lines3d(rbind(X[i,], PC12[i,]),col='blue')
lines3d(rbind(M + 2*PC$sdev[1] * PC$loadings[,1], M - 2*PC$sdev[1] * PC$loadings[,1]), col='forestgreen',lwd=2)
lines3d(rbind(M + 2*PC$sdev[2] * PC$loadings[,2], M - 2*PC$sdev[2] * PC$loadings[,2]), col='forestgreen',lwd=2)
