##### Descriptive/inferential analysis on the variable m100 ('very basic'!)
attach(record)
record <- read.table('record_mod.txt', header=T)
record
load("C:/Users/Marco Paggiaro/OneDrive/Desktop/mieidati/Applied Statistics/Labs/Lab1/LAB_1.R")
setwd("C:/Users/Marco Paggiaro/OneDrive/Desktop/mieidati/Applied Statistics/Labs/Lab1")
record <- read.table('record_mod.txt', header=T)
record
record <- read.table('record_mod.txt', header=T)
record <- read.table('record.txt', header=T)
record
head(record)
dim(record)
dimnames(record)
# Transform times in seconds
record[,4:7] <- record[,4:7]*60
record
# to save a data frame (or a matrix)
write.table(record, file = 'record_mod.txt')
# to save several objects in the workspace
W <- matrix(data = c(11,12,13,14,15,16), nrow = 2, ncol = 3, byrow = F)
V <- t(W)
a <- 1
save(W,V,a, file = 'variousobjects.RData')
# to save the entire workspace: save.image('FILENAME.RData')
save.image("myworkspace.RData")
# this command remove all the variable of the workspace
rm(list=ls())
ls()
# to load a workspace (i.e., .RData)
load("variousobjects.RData")
ls()
record <- read.table('record_mod.txt', header=T)
record
# some synthetic indices
colMeans(record)
sapply(record, mean)
sapply(record, sd)
sapply(record, var)
cov(record)
cor(record)
##### Descriptive/inferential analysis on the variable m100 ('very basic'!)
attach(record)
# Recall: qqplot to verify (qualitatively) the Gaussian assumption on the
# distribution generating sample
qqnorm(m100) # quantile-quantile plot
qqline(m100, col='red') # theoretical line
# Recall: Shapiro-Wilk test to verify (quantitatively) the Gaussian assumption on the
# distribution generating sample
shapiro.test(m100)
alpha <- .05
sample.mean <- mean(m100)
mean.H0 <- 11.5
sample.sd <- sd(m100)
n     <- length(m100)
tstat <- (sample.mean - mean.H0)/(sample.sd/sqrt(n))
cfr.t <- qt( 1 - alpha/2, n-1 )
abs(tstat) < cfr.t  # cannot reject H0 (accept H0)
pval  <- ifelse(tstat >= 0, (1 - pt(tstat, n-1))*2, pt(tstat, n-1)*2)
pval
IC <- c(inf     = sample.mean - sample.sd/sqrt(n) * qt( 1 - alpha/2, n-1 ),
center  = sample.mean,
sup     = sample.mean + sample.sd/sqrt(n) * qt( 1 - alpha/2, n-1 ))
IC
# automatically
t.test(m100, mu = mean.H0, alternative = 'two.sided', conf.level = 1-alpha)
# command layout
x11()
layout(cbind(c(1,1), c(2,3)), widths=c(2,1), heights=c(1,1))
plot(m100,m200)
hist(m100, prob=T)
hist(m200, prob=T)
dev.off()
x11()
par(mfrow=c(2,2))
hist(m100,prob=T,main="Histogram records 100m",xlab="sec")
hist(m200,prob=T,main="Histogram records 200m",xlab="sec")
boxplot(record[,1:2],main="Boxplot records 100m e 200m",xlab="sec")
plot(m100,m200, main='Scatter plot records 100m e 200m',xlab="Records 100m",ylab="Records 200m")
dev.off()
x11()
layout(cbind(c(1,1), c(2,3)), widths=c(2,1), heights=c(1,1))
plot(m100,m200)
hist(m100, prob=T)
hist(m200, prob=T)
# Fit of the linear model (command lm)
# Model: m200=beta0*m100+eps, eps~N(0,sigma^2)
regression <- lm(m200 ~ m100)
regression
#more detailed output here
summary(regression)
coef(regression)
vcov(regression)
vcov(regression)
residuals(regression)
fitted(regression)
# visualization of the linear regression:
# we add the regression line with abline.
x11()
plot(m100, m200, asp=1,cex=0.75)
abline(coef(regression))
points(m100, fitted(regression), col='red', pch=19)
legend('bottomright',c('Obs.','Fit','Reg. line'),col=c('black','red','black'),lwd=c(1,1,1),lty=c(-1,-1,1),pch=c(c(1,19,-1)))
title(main='Linear regression (m200 vs m100)')
0 vs H1: beta0!=0)
SSreg <- sum((fitted(regression) - mean(m200))^2)
SSres <- sum(residuals(regression)^2)
SStot <- sum((m200 - mean(m200))^2)
n <- length(m200)
Fstat <- (SSreg/1) / (SSres/(n-2))
P <- 1 - pf(Fstat, 1, n-2)
P # reject H0
tervals (command predict)
newdata <- data.frame(m100=c(10,11,12))
pred_nd <- predict(regression, newdata)
pred_nd
# predictions with an interval (of confidence or of prediction)
IC_nd <- predict(regression, newdata, interval = 'confidence', level = .99)
IC_nd
IP_nd <- predict(regression, newdata, interval = 'prediction', level = .99)
IP_nd
x11()
plot(m100, m200, asp=1,ylim=c(18.5,27.5),cex=0.5)
abline(coef(regression))
points(m100, fitted(regression), col='red', pch=20)
points(c(10,11,12),pred_nd,col='blue',pch=16)
matlines(rbind(c(10,11,12),c(10,11,12)),t(IP_nd[,-1]),type="l",lty=2,col='dark grey',lwd=2)
matpoints(rbind(c(10,11,12),c(10,11,12)),t(IP_nd[,-1]),pch="-",lty=2,col='dark grey',lwd=2,cex=1.5)
matlines(rbind(c(10,11,12),c(10,11,12)),t(IC_nd[,-1]),type="l",lty=1,col='black',lwd=2)
matpoints(rbind(c(10,11,12),c(10,11,12)),t(IC_nd[,-1]),pch="-",lty=1,col='black',lwd=2,cex=1.5)
legend('bottomright',c('Obs.','Fit','Reg. line','Pred. new','IC','IP'),col=c('black','red','black','blue','black','dark grey'),lwd=c(1,1,1,1,2,2),lty=c(-1,-1,1,-1,1,2),pch=c(c(1,19,-1,19,-1,-1)))
title(main='Linear regression (m200 vs m100)')
dev.off()
x11()
plot(m100, m200, asp=1,ylim=c(18.5,27.5),cex=0.5)
abline(coef(regression))
points(m100, fitted(regression), col='red', pch=20)
points(c(10,11,12),pred_nd,col='blue',pch=16)
matlines(rbind(c(10,11,12),c(10,11,12)),t(IP_nd[,-1]),type="l",lty=2,col='dark grey',lwd=2)
matpoints(rbind(c(10,11,12),c(10,11,12)),t(IP_nd[,-1]),pch="-",lty=2,col='dark grey',lwd=2,cex=1.5)
matlines(rbind(c(10,11,12),c(10,11,12)),t(IC_nd[,-1]),type="l",lty=1,col='black',lwd=2)
matpoints(rbind(c(10,11,12),c(10,11,12)),t(IC_nd[,-1]),pch="-",lty=1,col='black',lwd=2,cex=1.5)
legend('bottomright',c('Obs.','Fit','Reg. line','Pred. new','IC','IP'),col=c('black','red','black','blue','black','dark grey'),lwd=c(1,1,1,1,2,2),lty=c(-1,-1,1,-1,1,2),pch=c(c(1,19,-1,19,-1,-1)))
title(main='Linear regression (m200 vs m100)')
dev.off()
s
x11()
par (mfrow=c(2,2))
boxplot(residuals(regression), main='Boxplot of residuals')
qqnorm(residuals(regression))
plot(m100, residuals(regression), main='Residuals vs m100')
abline(h=0, lwd=2)
plot(fitted(regression), residuals(regression), main='Residuals vs fitted m200')
abline(h=0, lwd=2)
dev.off()
detach(record)
graphics.off()
record <- read.table('record_mod.txt', header=T)
record
# Scatterplot
x11()
pairs(record)  # or plot(record)
# Boxplot
boxplot(record, col='gold')
pairs(record, asp=1)
# Scatterplot
x11()
# matrix of scatterplots:
pairs(record)  # or plot(record)
# same unit of measure on the 2 axis.
x11()
# Boxplot
boxplot(record, col='gold')
# hence some transformations could be useful:
boxplot(log(record), col='gold')
# Starplot
x11()
stars(record, col.stars=rep('gold',55))
# rappresentazione "stile Fifa":
stars(record, col.stars=rep('gold',55))
# Radarplot
stars(record, draw.segments=T)
# Chernoff faces
x11()
source('faces.R')
faces(record)
##### Example 2: cerebral aneurysm
aneurysm <- read.table('aneurysm.txt', header=T, sep=',')
head(aneurysm)
dim(aneurysm)
aneurysm.geometry <- aneurysm[,1:4]
aneurysm.position <- factor(aneurysm[,5])
head(aneurysm.geometry)
color.position <- ifelse(aneurysm.position == '1', 'red', 'blue')
attach(aneurysm.geometry)
x11()
layout(cbind(c(1,1), c(2,3)), widths=c(2,1), heights=c(1,1))
plot(R1,R2, asp=1, col=color.position,pch=16)
hist(R1, prob=T, xlim=c(-10,15))
hist(R2, prob=T, xlim=c(-10,15))
color.position <- ifelse(aneurysm.position == '1', 'red', 'blue')
x11()
layout(cbind(c(1,1), c(2,3)), widths=c(2,1), heights=c(1,1))
plot(C1,C2, asp=1, col=color.position,pch=16)
hist(C1, prob=T, xlim=c(-5,5))
hist(C2, prob=T, xlim=c(-5,5))
# Scatterplot
x11()
pairs(aneurysm.geometry, col=color.position, pch=16)
# Boxplot
boxplot(aneurysm.geometry, col='gold')
par(mfrow = c(1,4))
boxplot(aneurysm.geometry$R1 ~ aneurysm.position, col=c('red','blue'), main='R1')
boxplot(aneurysm.geometry$R2 ~ aneurysm.position, col=c('red','blue'), main='R2')
boxplot(aneurysm.geometry$C1 ~ aneurysm.position, col=c('red','blue'), main='C1')
boxplot(aneurysm.geometry$C2 ~ aneurysm.position, col=c('red','blue'), main='C2')
par(mfrow = c(1,4))
boxplot(aneurysm.geometry$R1 ~ aneurysm.position, col=c('red','blue'), main='R1', ylim=range(aneurysm.geometry))
boxplot(aneurysm.geometry$R2 ~ aneurysm.position, col=c('red','blue'), main='R2', ylim=range(aneurysm.geometry))
boxplot(aneurysm.geometry$C1 ~ aneurysm.position, col=c('red','blue'), main='C1', ylim=range(aneurysm.geometry))
boxplot(aneurysm.geometry$C2 ~ aneurysm.position, col=c('red','blue'), main='C2', ylim=range(aneurysm.geometry))
source('faces.R')
x11()
faces(aneurysm.geometry)
# matplot
matplot(t(aneurysm.geometry),type='l')
matplot(t(aneurysm.geometry),type='l',col=color.position)
district <- c('MI',  'MI',  'VA',  'BG',  'LO', 'LO',  'CR',  'Alt', 'CR',  'MI',
'Alt', 'CR',  'LO',  'VA',  'MI',  'Alt', 'LO',  'MI')
district <- factor(district,levels=c('MI','LO','BG','CR','VA','Alt'))
district
# Pie chart (no ordering of levels)
x11()
pie(table(district),col=rainbow(length(levels(district))))
# 3D Pie chart (not recommended!!)
library(plotrix)
x11(width = 14)
par(mfrow=c(1,2))
pie3D(table(district)[1:length(levels(district))],labels=levels(district),explode=0.1,
main="Pie Chart of Districts ",col=rainbow(length(levels(district))))
set.seed(180317)
shuffle = sample(1:length(levels(district)), size=length(levels(district)), replace = F)
pie3D(table(district)[shuffle],labels=levels(district)[shuffle],explode=0.1,
main="Pie Chart of Districts ",col=rainbow(length(levels(district)))[shuffle])
x11()
barplot(table(district)/length(district))
# or
plot(district)   # barplot of absolute frequences
# Remark: R is an object-oriented language; a function (e.g.,
#       the function plot()) may behave differently depending on the object
#       it takes as input
is(district)[1]
plot(district)
# record is a data frame
is(record)[1]
plot(record) # scatterplot
x <- seq(-4,4,0.15)
y <- seq(-4,4,0.15)
# To build a function in R
gaussian <- function(x, y)
{exp(-(x^2+y^2+x*y))}
w <- matrix(NA, nrow = length(x), ncol=length(y))
# for
for(i in 1:length(x))
{
for(j in 1:length(y))
{w[i,j] <- gaussian(x[i], y[j])}
}
# or
w <- outer(x, y, gaussian)
x11()
image(x, y, w)
contour(x, y, w, add=T)
persp(x, y, w, col='red')
persp(x, y, w, col='red', theta=30, phi=30, shade=.05, zlab='density')
# To dowload a package:
# from RStudio: Tools -> Instal Packages -> type PACKAGENAME
#               and click install
# from R: Packages -> Instal Packages -> Choose a CRAN mirror
#         (e.g., Italy (Milano)) -> Choose the package and click OK
library(rgl)
persp3d(x, y, w, col='red', alpha=1)
lines3d(x,x, gaussian(x,x), col='blue', lty=1)
lines3d(x,x, 0, col='blue', lty=2)
